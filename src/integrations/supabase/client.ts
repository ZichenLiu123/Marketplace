
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://zumvhtmqbwxkcbhlqjyl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp1bXZodG1xYnd4a2NiaGxxanlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI2ODEzODMsImV4cCI6MjA1ODI1NzM4M30.LUY254461rWC9IE7KU86ezvYKe4A0GZT_zkEFsezits";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Clear any stale auth data before initializing
if (typeof window !== 'undefined') {
  try {
    // Remove any potential stale auth data
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('supabase.auth.') || key === 'supabase-auth') {
        localStorage.removeItem(key);
      }
    });
  } catch (e) {
    console.warn('Failed to clean localStorage:', e);
  }
}

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storage: localStorage,
      storageKey: 'supabase-auth'
    },
    global: {
      headers: {
        'Content-Type': 'application/json'
      }
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    }
  }
);

// Helper function to check if Supabase is properly configured
export const isSupabaseConfigured = () => {
  return Boolean(SUPABASE_URL && SUPABASE_PUBLISHABLE_KEY);
};

// Helper function to refresh the session if needed
export const refreshSessionIfNeeded = async () => {
  try {
    const { data } = await supabase.auth.getSession();
    if (data.session) {
      // Check if token is close to expiry (less than 10 minutes)
      const expiresAt = data.session.expires_at;
      if (expiresAt) {
        const expiryTime = new Date(expiresAt * 1000);
        const now = new Date();
        const tenMinutesInMs = 10 * 60 * 1000;
        
        if (expiryTime.getTime() - now.getTime() < tenMinutesInMs) {
          console.log('Token close to expiry, refreshing session');
          const { data: refreshData } = await supabase.auth.refreshSession();
          return refreshData.session;
        }
      }
      return data.session;
    }
  } catch (error) {
    console.error('Error refreshing session:', error);
  }
  return null;
};
